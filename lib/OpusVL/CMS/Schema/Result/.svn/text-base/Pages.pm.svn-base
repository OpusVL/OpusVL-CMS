package OpusVL::CatalystX::SimpleCMS::Schema::Result::Pages;

=head1 NAME

OpusVL::CatalystX::SimpleCMS::Schema::Result::Page -

=head1 DESCRIPTION

Schema configuration of the Pages in the SimpleCMS

=head1 METHODS

tree            -
head            - 
body            -
cascaded_tags   - 
page_tags       -
tags            - 

=head1 BUGS

=head1 AUTHOR

OpusVL - Nuria

=head1 COPYRIGHT & LICENSE

Copyright 2009 the above author(s).

This sofware is free software, and is licensed under the same terms as perl itself.

=cut
###########################################################################################


use DBIx::Class;
use Moose;
extends 'DBIx::Class';

__PACKAGE__->load_components("Tree::AdjacencyList", "InflateColumn::DateTime", "Core");
__PACKAGE__->table("pages");
__PACKAGE__->add_columns(
  "page_id",
  {
    data_type => "integer",
    default_value => "nextval('pages_page_id_seq'::regclass)",
    is_nullable => 0,
    size => 4,
  },
  "url",
  {
    data_type => "character varying",
    default_value => undef,
    is_nullable => 0,
    size => 128,
  },
  "parent_id",
  { data_type => "integer", default_value => undef, is_nullable => 1, size => 4 },
  "header",
  {
    data_type => "character varying",
    default_value => undef,
    is_nullable => 0,
    size => 255,
  },
  "breadcrumb",
  {
    data_type => "character varying",
    default_value => undef,
    is_nullable => 0,
    size => 128,
  },
  "title",
  {
    data_type => "character varying",
    default_value => undef,
    is_nullable => 0,
    size => 255,
  },
  "created",
  {
    data_type => "timestamp without time zone",
    default_value => "now()",
    is_nullable => 0,
    size => 8,
  },
  "description",
  {
    data_type => "character varying",
    default_value => undef,
    is_nullable => 1,
    size => undef,
  },
);
__PACKAGE__->set_primary_key("page_id");
__PACKAGE__->has_many(
  "attachments",
  "OpusVL::CatalystX::SimpleCMS::Schema::Result::Attachments",
  { "foreign.page_id" => "self.page_id" },
);
__PACKAGE__->has_many(
  "contents",
  "OpusVL::CatalystX::SimpleCMS::Schema::Result::PageContents",
  { "foreign.page_id" => "self.page_id" },
);
__PACKAGE__->has_many(
  "pagetags",
  "OpusVL::CatalystX::SimpleCMS::Schema::Result::PageTags",
  { "foreign.page_id" => "self.page_id" },
);
__PACKAGE__->parent_column('parent_id');


####################################################################################
# Accessors - 
####################################################################################

=head2 tree
=cut
sub tree
{
	my @tree = shift;

	while ( my $parent = $tree[0]->parent )
	{
		unshift @tree,$parent;
	}

	return @tree;
}

=head2 head
=cut
sub head
{
	my $self = shift;
	my @tree = $self->tree;
	return $tree[0];
}

=head2 body
=cut
sub body
{
	my $self = shift;

	return $self->search_related( 'contents', { status => 'Published' }, { order_by => { -desc => 'created' } } )->first->body;
}

=head2 cascaded_tags
=cut
sub cascaded_tags
{
	my $self = shift;
	my @tree = $self->tree;
	pop @tree;

	my %tags;
	foreach my $page (@tree)
	{
		foreach my $page_tag ($page->pagetags)
		{
			my $tag   = $page_tag->tag;
			my $group = $tag->group;
			if ( $group->cascade )
			{
				if ( $group->multiple )
				{
					push @{$tags{$group->name}}, $tag->name;
				}
				else
				{
					$tags{$group->name} = $tag->name;
				}
			}
		}
	}

	return \%tags;
}


=head2 page_tags
=cut
sub page_tags
{
	my $self = shift;

	my %page_tags = $self->search_related( 'pagetags' );

	return \%page_tags;
}

=head2 tags
=cut
sub tags
{
	my $self = shift;

	my %tags = merge( $self->page_tags, $self->cascaded_tags );

	return \%tags;
}

##
1;
